set nocompatible               " be iMproved
filetype off                   " required!
set encoding=utf-8
set t_Co=256

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'

" original repos on github
Bundle 'Lokaltog/powerline'
" Bundle 'kien/ctrlp.vim'
Bundle 'mileszs/ack.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'altercation/vim-colors-solarized'
Bundle 'vim-ruby/vim-ruby'
Plugin 'thoughtbot/vim-rspec'
Plugin 'tpope/vim-dispatch'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-bundler'
Bundle 'ervandew/supertab'
"Bundle 'rizzatti/funcoo.vim'
"Bundle 'rizzatti/dash.vim'
Bundle 'ggreer/the_silver_searcher'
Bundle 'tpope/vim-fugitive'
Plugin 'wincent/Command-T'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" Ruby Stuff
syntax on

" Set the color scheme
set background=dark
let g:solarized_termtrans = 1
colorscheme solarized

runtime macros/matchit.vim

" Store temporary files in a central spot
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Enable filetype-specific indenting and plugins
filetype plugin indent on

" highligh the current line
set cursorline
set number

" minimal number of columns to use for the line number
set numberwidth=5

" enable unsaved buffers
set hidden
set expandtab
set tabstop=2
set shiftwidth=2
set autoindent
set smarttab
set incsearch " make search work like FIND in browsers
set hlsearch " highlight search terms
set autoread " reload file if it's changed outside VIM
set nowrap

" Display a marker at 80 char width
set tw=80
set cc=+1

" Always show the status line
set laststatus=2

" Remap leader to comma
let mapleader=","

let g:rspec_runner = "os_x_iterm"

" Map ; to : so one keypress less
nnoremap ; :

nnoremap <leader>w <C-w>v<C-w>l " ,w split verically and switch to new split

" Shortcut to rapidly toggle `set list`
nmap <leader>l :set list!<CR>
 
" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬
"Invisible character colors
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59


" powerline
set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim

map <Leader>bb :!bundle install<cr>
map <leader>gg :topleft 10 :split Gemfile<cr>
map <leader>gr :topleft 10 :split config/routes.rb<cr>
map <Leader>gs :Gstatus<CR>
map <Leader>t :CommandT<CR>
map <Leader>rd :!bundle exec rspec % --format documentation<CR>
map <Leader>rf :CommandTFlush<CR>:CommandT<CR>

" RSpec.vim mappings
"map <Leader>t :call RunCurrentSpecFile()<CR>
"map <Leader>s :call RunNearestSpec()<CR>
"map <Leader>l :call RunLastSpec()<CR>
"map <Leader>a :call RunAllSpecs()<CR>

" Redo
map U <C-r>

" Map NERDTreeToggle to convenient key
nmap <leader>n :NERDTreeToggle<cr>

" Let uppercase W write the file
command! W :w

" Map moving text ALT + 
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

" Map copy to Command C
vmap <C-x> :!pbcopy<CR>  
vmap <C-c> :w !pbcopy<CR><CR> 

" Fuzzy finder: ignore stuff that can't be opened, and generated files
let g:fuzzy_ignore = "*.png;*.PNG;*.JPG;*.jpg;*.GIF;*.gif;vendor/**;coverage/**;tmp/**;rdoc/**"


"Now using thoughtbot/vim-rspec and tpope/dispatch.
let g:rspec_command = "Dispatch rspec {spec}"

" Disable the cursor keys - you'll thank me later!
"noremap <Up> <nop>
"noremap <Down> <nop>
"noremap <Left> <nop>
"noremap <Right> <nop>
"inoremap <Up> <nop>
"inoremap <Down> <nop>
"inoremap <Left> <nop>
"inoremap <Right> <nop>
"nnoremap j gj
"nnoremap k gk

" Map jj to <esc> to get out of insert mode quickly
:imap jj <Esc>
:imap jk <Esc>

" CtrlP OS-X Menu remapping
if has("gui_macvim")
  macmenu &File.New\ Tab key=<D-S-t>
endif

"use Ctrl+L to toggle the line number counting method
function! g:ToggleNuMode()
  if(&rnu == 1)
    set nu
  else
    set rnu
  endif
endfunc

nnoremap <C-L> :call g:ToggleNuMode()<cr>

" Switch from ack to ag
let g:ackprg = 'ag --nogroup --nocolor --column'
